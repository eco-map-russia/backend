/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.eco_map.api;

import com.example.eco_map.usecases.dto.AuthRequestDto;
import com.example.eco_map.usecases.dto.AuthResponseDto;
import com.example.eco_map.usecases.dto.ErrorResponse;
import com.example.eco_map.usecases.dto.RegistrationRequestDto;
import com.example.eco_map.usecases.dto.RegistrationResponseDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-29T11:29:36.357215400+03:00[Europe/Moscow]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Auth", description = "the Auth API")
public interface AuthApi {

    /**
     * POST /auth/login : Авторизация пользователя
     *
     * @param authRequestDto  (required)
     * @return Токен авторизации (status code 200)
     *         or Неверный запрос (валидация, некорректные параметры) (status code 400)
     *         or Ошибка авторизации (неверные креденшелы или токен) (status code 401)
     *         or Внутренняя ошибка сервера (status code 500)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Авторизация пользователя",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Токен авторизации", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверный запрос (валидация, некорректные параметры)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Ошибка авторизации (неверные креденшелы или токен)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    Mono<ResponseEntity<AuthResponseDto>> loginUser(
        @Parameter(name = "AuthRequestDto", description = "", required = true) @Valid @RequestBody Mono<AuthRequestDto> authRequestDto,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * POST /auth/register : Регистрация пользователя
     *
     * @param registrationRequestDto  (required)
     * @return Успешная регистрация (status code 200)
     *         or Неверный запрос (валидация, некорректные параметры) (status code 400)
     *         or Конфликт данных (например, пользователь уже существует) (status code 409)
     *         or Внутренняя ошибка сервера (status code 500)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Регистрация пользователя",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешная регистрация", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RegistrationResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверный запрос (валидация, некорректные параметры)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Конфликт данных (например, пользователь уже существует)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    Mono<ResponseEntity<RegistrationResponseDto>> registerUser(
        @Parameter(name = "RegistrationRequestDto", description = "", required = true) @Valid @RequestBody Mono<RegistrationRequestDto> registrationRequestDto,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );

}
