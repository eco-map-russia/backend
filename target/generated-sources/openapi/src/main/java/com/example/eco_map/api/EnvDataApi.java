/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.eco_map.api;

import com.example.eco_map.usecases.dto.AirQualityObservationDto;
import com.example.eco_map.usecases.dto.ErrorResponse;
import com.example.eco_map.usecases.dto.GetMapLayerData200ResponseInner;
import com.example.eco_map.usecases.dto.LocationSearchDto;
import com.example.eco_map.usecases.dto.RadiationDataObservationDto;
import com.example.eco_map.usecases.dto.RegionDetailsDto;
import com.example.eco_map.usecases.dto.RegionResponseDto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-29T11:29:36.357215400+03:00[Europe/Moscow]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "EnvData", description = "the EnvData API")
public interface EnvDataApi {

    /**
     * GET /regions : Список регионов
     *
     * @return Успешно (status code 200)
     *         or Внутренняя ошибка сервера (status code 500)
     */
    @Operation(
        operationId = "getAllRegions",
        summary = "Список регионов",
        tags = { "EnvData" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешно", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RegionResponseDto.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/regions",
        produces = { "application/json" }
    )
    
    Mono<ResponseEntity<Flux<RegionResponseDto>>> getAllRegions(
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * GET /air-quality/current : Актуальные данные по качеству воздуха
     *
     * @param lat  (required)
     * @param lon  (required)
     * @return Актуальные данные по воздуху (status code 200)
     *         or Неверный запрос (валидация, некорректные параметры) (status code 400)
     *         or Ресурс не найден (точка наблюдения, регион и т.д.) (status code 404)
     *         or Внутренняя ошибка сервера (status code 500)
     */
    @Operation(
        operationId = "getCurrentAirQuality",
        summary = "Актуальные данные по качеству воздуха",
        tags = { "EnvData" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Актуальные данные по воздуху", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AirQualityObservationDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверный запрос (валидация, некорректные параметры)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Ресурс не найден (точка наблюдения, регион и т.д.)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/air-quality/current",
        produces = { "application/json" }
    )
    
    Mono<ResponseEntity<AirQualityObservationDto>> getCurrentAirQuality(
        @NotNull @Parameter(name = "lat", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lat", required = true) Double lat,
        @NotNull @Parameter(name = "lon", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lon", required = true) Double lon,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * GET /map/layer/{type} : Данные слоя карты
     *
     * @param type  (required)
     * @return Данные выбранного слоя карты (status code 200)
     *         or Внутренняя ошибка сервера (status code 500)
     */
    @Operation(
        operationId = "getMapLayerData",
        summary = "Данные слоя карты",
        tags = { "EnvData" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Данные выбранного слоя карты", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetMapLayerData200ResponseInner.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/map/layer/{type}",
        produces = { "application/json" }
    )
    
    Mono<ResponseEntity<Flux<GetMapLayerData200ResponseInner>>> getMapLayerData(
        @Parameter(name = "type", description = "", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * GET /stations : Радиоактивные данные
     *
     * @param lat  (required)
     * @param lon  (required)
     * @return Актуальные радиоактивные данные (status code 200)
     *         or Неверный запрос (валидация, некорректные параметры) (status code 400)
     *         or Ресурс не найден (точка наблюдения, регион и т.д.) (status code 404)
     *         or Внутренняя ошибка сервера (status code 500)
     */
    @Operation(
        operationId = "getRadiationData",
        summary = "Радиоактивные данные",
        tags = { "EnvData" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Актуальные радиоактивные данные", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RadiationDataObservationDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверный запрос (валидация, некорректные параметры)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Ресурс не найден (точка наблюдения, регион и т.д.)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stations",
        produces = { "application/json" }
    )
    
    Mono<ResponseEntity<RadiationDataObservationDto>> getRadiationData(
        @NotNull @Parameter(name = "lat", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lat", required = true) Double lat,
        @NotNull @Parameter(name = "lon", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lon", required = true) Double lon,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * GET /regions/{id} : Детали региона
     *
     * @param id  (required)
     * @return Детальная информация по региону (status code 200)
     *         or Ресурс не найден (точка наблюдения, регион и т.д.) (status code 404)
     *         or Внутренняя ошибка сервера (status code 500)
     */
    @Operation(
        operationId = "getRegionById",
        summary = "Детали региона",
        tags = { "EnvData" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Детальная информация по региону", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RegionDetailsDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Ресурс не найден (точка наблюдения, регион и т.д.)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/regions/{id}",
        produces = { "application/json" }
    )
    
    Mono<ResponseEntity<RegionDetailsDto>> getRegionById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * GET /search : Поиск локации (город/регион)
     *
     * @param query  (required)
     * @return Результаты поиска по координатам (status code 200)
     *         or Внутренняя ошибка сервера (status code 500)
     */
    @Operation(
        operationId = "searchLocation",
        summary = "Поиск локации (город/регион)",
        tags = { "EnvData" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Результаты поиска по координатам", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LocationSearchDto.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/search",
        produces = { "application/json" }
    )
    
    Mono<ResponseEntity<Flux<LocationSearchDto>>> searchLocation(
        @NotNull @Parameter(name = "query", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = true) Double query,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );

}
